

import java.io.*;
import java.util.*;

class GFG {
    
    // recursive approach
    
    public static int lcs(String s1,String s2){
    
    
    if(s1.length()==0 || s2.length()==0){
        return 0;
        
    }
    
     
    if(s1.length()==0 && s2.length()==0){
        return 0;
        
    }
    
    
    
    if(s1.charAt(0)==s2.charAt(0)){
        return 1+lcs(s1.substring(1),s2.substring(1));
    }
    
    else{
        
        int option1=lcs(s1,s2.substring(1));
        int option2=lcs(s1.substring(1),s2);
        int option3=lcs(s1.substring(1),s2.substring(1));
        
        return Math.max(option1,Math.max(option2,option3));
        
}}



public static int lcsM(String s1,String s2,int storage[][]){
    
     if(s1.length()==0   || s2.length()==0){
        storage[m][n]=0;
        
    }
    
    
    if(storage[m][n]!=-1){
        
        return storage[m][n];
        
    }
    
    
      if(s1.charAt(0)==s2.charAt(0)){
        storage[m][n]= 1+lcs(s1.substring(1),s2.substring(1));
       
    }
    
    
    
    
    else{
        
        int option1=lcs(s1,s2.substring(1));
        int option2=lcs(s1.substring(1),s2);
        int option3=lcs(s1.substring(1),s2.substring(1));
        
        storage[m][n]= Math.max(option1,Math.max(option2,option3));
        
        
    }
    return storage[m][n];
}    
    
   
    
  public static int lcsM(String s1,String s2){
      
      
      int m=s1.length();
      int n=s2.length();
      
      
      int storage[][]=new int [m][n];
      
      for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
              
              storage[i][j]=-1;
          }
      }
      
      return lcsM(s1,s2,storage);
      
      
  }

    
	public static void main (String[] args) {
	    
	    
	    
	    
	    
		String s1="dgei";
		String s2="begi";
		System.out.println(lcs(s1,s2));
    System.out.println(lcsM(s1,s2));
	}
}















    
